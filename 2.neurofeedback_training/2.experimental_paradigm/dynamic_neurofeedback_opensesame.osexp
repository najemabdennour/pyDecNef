---
API: 2.1
OpenSesame: 3.3.8
Platform: posix
---
set width 1024
set uniform_coordinates yes
set title nf
set subject_parity even
set subject_nr 0
set start nf_task
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend legacy
set keyboard_backend legacy
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "/Users/pedromargolles/scripts/pyDecNef/scripts/2.neurofeedback_training/2.experimental_paradigm"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set background black

define sketchpad ITI_interval
	set duration 10000
	set description "Interval between trials"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define inline_script MRI_heatup
	set description "Check for signal informing MRI scanner heatup is completed"
	___run__
	while True: # Stay here until receiving 'fmriheatedup' signal from the server
	    msg = exp.client.listen()
	    if msg == 'fmriheatedup':
	        break
	__end__
	set _prepare ""

define inline_script connect_to_server
	set description "Connect to specified server IP and PORT in connection_config module"
	___run__
	import sys
	sys.path.append(exp.experiment_path) # Import connection_config module from experimental folder
	
	from connection_config import Connection
	exp.client = Connection()
	exp.client.start_client() # Connect client to server
	__end__
	set _prepare ""

define inline_script dynamic_feedback_request
	set description "Visual feedback"
	___run__
	exp.set('decoding_list', []) # Set a list to store each trial decoding results
	msg = {'request_type': 'feedback_start'}
	
	exp.client.send(msg) # Send dynamic feedback request
	feedback.circle(0, 0, 0, fill=True, color='red') # Default circle size when this timewindow starts before receiving information from decoder
	
	while True:
	    msg = exp.client.listen()
	    exp.decoding_list.append(msg) # Append decoding result to list of this trial results
	    feedback.clear() # Clear feedback
	    try:
	        new_radius = circle_radius(decoding_prob = exp.decoding_list[-1], chance_level = 0.5, chance_level_radius = 50) # Convert decoding performance to radius
	        feedback.circle(0, 0, new_radius, fill=True, color='red') # Participants performance as a circle
	        feedback.circle(0, 0, 50, fill=False, color='yellow', penwidth=2) # Chance-level circle
	        feedback.circle(0, 0, 100, fill=False, color='white', penwidth=4) # Maximum performance reference
	        feedback.show()
	        print('Decoding probability:', exp.decoding_list[-1])
	    except:
	        if msg == 'ok':
	            break
	            
	__end__
	___prepare__
	feedback = Canvas() # Set a canvas to draw a circle
	
	def circle_radius(decoding_prob, chance_level, chance_level_radius): # Transform decoding results to circle size
	      new_radius = (decoding_prob * chance_level_radius) /  chance_level
	      return new_radius
	__end__

define inline_script end_run
	set description "Send end run request"
	___run__
	msg = {'request_type': 'end_run'}
	exp.client.send(msg) # Send end_run request
	while True:
	    msg = exp.client.listen()
	    if msg == 'ok':
	        break
	__end__
	set _prepare ""

define sequence experiment_seq
	set flush_keyboard yes
	set description "Corre un número de objetos en secuencia"
	run new_trial_onset always
	run dynamic_feedback_request always
	run logging always
	run increase_trial_idx always
	run ITI_interval always

define inline_script fMRI_baseline
	set description "Check for signal informing whole fMRI baseline was acquired"
	___run__
	while True: # Stay here until receiving 'baselineok' signal from the server
	    msg = exp.client.listen()
	    if msg == 'baselineok':
	        break
	        
	__end__
	set _prepare ""

define inline_script increase_trial_idx
	set description "Increment trial counter by one unit"
	set _run "exp.set('trial_idx', var.trial_idx + 1) # Increment trial counter by one unit"
	set _prepare ""

define sketchpad initial_fixation
	set duration 1500
	set description "Initial fixation"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define logger logging
	set description "Log this trial information"
	set auto_log yes

define inline_script new_trial_onset
	set description "Send new trial information to the server"
	___run__
	msg = {'request_type': 'trial_onset', 
	       'trial_idx': var.trial_idx,
	       'ground_truth': var.ground_truth,
	       'stimuli': var.target}
	
	exp.client.send(msg) # Send trial onset information
	
	while True: # Stay here until receiving 'baselineok' signal from the server
	    msg = exp.client.listen()
	    if msg == 'ok':
	        break
	        
	__end__
	set _prepare ""

define sequence nf_task
	set flush_keyboard yes
	set description "Corre un número de objetos en secuencia"
	run set_variables always
	run server_connection always
	run connect_to_server always
	run run_start_time always
	run wait_until_heatup always
	run MRI_heatup always
	run wait_until_baseline always
	run fMRI_baseline always
	run initial_fixation always
	run trials always
	run time_run_end_time always
	run end_run always

define inline_script run_start_time
	set description "Time when a run started"
	set _run "var.run_start_time = self.time() # Time when a run started"
	set _prepare ""

define sketchpad server_connection
	set duration 1
	set description "Just wait here until client-server computers are connected"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="connecting to the server..." x=0 y=0 z_index=0

define inline_script set_variables
	set description "Set global variables for the experimental paradigm"
	set _run "exp.set('trial_idx', 0) # Set a trial counter"
	set _prepare ""

define inline_script time_run_end_time
	set description "Time when a run ended"
	set _run "var.run_end_time = self.time() - var.run_start_time # Time when a run ended"
	set _prepare ""

define loop trials
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Corre otro objeto de forma repetida"
	set cycles 8
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 target living
	setcycle 0 ground_truth 1
	setcycle 1 target living
	setcycle 1 ground_truth 1
	setcycle 2 target living
	setcycle 2 ground_truth 1
	setcycle 3 target living
	setcycle 3 ground_truth 1
	setcycle 4 target nonliving
	setcycle 4 ground_truth 0
	setcycle 5 target nonliving
	setcycle 5 ground_truth 0
	setcycle 6 target nonliving
	setcycle 6 ground_truth 0
	setcycle 7 target nonliving
	setcycle 7 ground_truth 0
	run experiment_seq

define sketchpad wait_for_decoding
	set duration 1
	set description "Ask the server for decoding"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define sketchpad wait_until_baseline
	set duration 1
	set description "Wait here until baseline adquisition is completed (defined by n_baseline_vols in 1.realtime_fMRI_scripts/modules/config/exp_config.py)"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="" x=0 y=0 z_index=0
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define sketchpad wait_until_heatup
	set duration 1
	set description "Wait here until MRI scanner has completed heatup (defined by n_heatup_vols in 1.realtime_fMRI_scripts/modules/config/exp_config.py)"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="waiting for MRI scanner heatup..." x=0 y=0 z_index=0

