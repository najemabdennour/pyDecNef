---
API: 3
OpenSesame: 4.0.28
Platform: posix
---
set width 1024
set uniform_coordinates yes
set title nf
set subject_parity even
set subject_nr 0
set start nf_task
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend psycho
set round_decimals 2
set mouse_backend psycho
set keyboard_backend psycho
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic False
set font_family mono
set font_bold False
set experiment_path "/home/najem/Downloads/data_fmri/Online_coadaptation_participant_2_Samu/1.client/1.experiment"
set disable_garbage_collection False
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set background black

define sketchpad ITI_interval
	set duration 10000
	set description "Interval between trials"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define inline_script MRI_heatup
	set description "Check for signal informing MRI scanner heatup is completed"
	___run__
	while True: # Stay here until receiving 'fmriheatedup' signal from the server
	    msg = exp.client.listen()
	    if msg == 'fmriheatedup':
	        break
	__end__
	set _prepare ""

define inline_script connect_to_server
	set description "Connect to specified server IP and PORT in connection_config module"
	___run__
	import sys
	sys.path.append(exp.experiment_path) # Import connection_config module from the experimental folder (i.e., where this file is placed)
	
	from connection_config import Connection
	exp.client = Connection()
	exp.client.start_client() # Connect the client computer to the server computer
	__end__
	set _prepare ""

define inline_script end_run_request
	set description "Send end run request"
	___run__
	msg = {'request_type': 'end_run'}
	exp.client.send(msg) # Send request to end this run to the server
	while True:
	    msg = exp.client.listen()
	    if msg == 'ok':
	        break
	__end__
	set _prepare ""

define inline_script fMRI_baseline
	set description "Check for signal informing fMRI baseline was acquired"
	___run__
	while True: # Stay here until receiving 'baselineok' signal from the server
	    msg = exp.client.listen()
	    if msg == 'baselineok':
	        break
	        
	__end__
	set _prepare ""

define inline_script feedback_delay
	set description "Show feedback circle for some seconds"
	set _run "clock.sleep(1500) # Show feedback for 1.5 seconds"
	set _prepare ""

define inline_script feedback_reception_time
	set description "Time when feedback was received"
	set _run "var.feedback_reception_time = clock.time() - var.run_start_time"
	set _prepare ""

define inline_script feedback_request_time
	set description "Time when feedback was requested"
	___run__
	var.feedback_request_time = clock.time() - var.run_start_time
	__end__
	set _prepare ""

define inline_script increase_trial_idx
	set description "Increment trial counter by one unit"
	___run__
	#exp.set('trial_idx', var.trial_idx + 1) # Increment trial counter by one unit
	var.trial_idx = var.trial_idx + 1
	__end__
	set _prepare ""

define sketchpad induction_period
	set duration 6000
	set description "Induction period where participants are required to manipulate their brain activity in presence or not of a stimuli"
	draw textline center=1 color="#808080" font_bold=no font_family=mono font_italic=no font_size=40 html=yes show_if=always text="[stimuli]" x=16 y=-5 z_index=0

define sketchpad initial_fixation
	set duration 1500
	set description "Initial fixation"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define logger logging
	set description "Log this trial information"
	set auto_log yes

define sequence nf_task
	set flush_keyboard yes
	set description "Neurofeedback training sequence"
	run set_variables always
	run server_connection always
	run connect_to_server always
	run run_start_time always
	run wait_until_heatup always
	run MRI_heatup always
	run wait_until_baseline always
	run fMRI_baseline always
	run initial_fixation always
	run trials_config always
	run run_end_time always
	run end_run_request always

define inline_script run_end_time
	set description "Run end time"
	set _run "var.run_end_time = clock.time() - var.run_start_time"
	set _prepare ""

define inline_script run_start_time
	set description "Run start time"
	set _run "var.run_start_time = clock.time()"
	set _prepare ""

define sketchpad server_connection
	set duration 1
	set description "Just wait here until client-server computers are connected"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="connecting to the server..." x=0 y=0 z_index=0

define inline_script set_variables
	set description "Set global variables required for the experimental paradigm"
	___run__
	#exp.set('trial_idx', 0) # Set a trial counter
	var.trial_idx = 0
	__end__
	set _prepare ""

define inline_script show_feedback
	set description "Show feedback to participant as a circle"
	___run__
	new_radius = circle_radius(decoding_prob = var.decoding_prob, chance_level = 0.5, chance_level_radius = 50) # Convert decoding probability to radius
	
	feedback.circle(0, 0, new_radius, fill=True, color='red') # Participants performance as a circle
	feedback.circle(0, 0, 50, fill=False, color='yellow', penwidth=2) # Chance-level circle
	feedback.circle(0, 0, 100, fill=False, color='white', penwidth=4) # Maximum performance reference
	feedback.show()
	__end__
	___prepare__
	feedback = Canvas() # Set a canvas to draw a circle
	
	def circle_radius(decoding_prob, chance_level, chance_level_radius): # Transform decoding probability to circle size
	      new_radius = (decoding_prob * chance_level_radius) /  chance_level
	      return new_radius
	__end__

define inline_script static_feedback_request
	set description "Static feedback request"
	___run__
	msg = {'request_type': 'feedback_start'}
	
	exp.client.send(msg) # Send decoding request
	
	while True: # Stay here until receiving decoding probability as feedback from the server
	    msg = exp.client.listen()
	    try:
	        #exp.set('decoding_prob', float(msg))
	        var.decoding_prob = float(msg)						
	    except:
	        if msg == 'ok': # Stay here until receiving 'ok' signal from the server
	            break
	__end__
	set _prepare ""

define inline_script trial_offset_time
	set description "Trial offset time"
	___run__
	var.trial_offset_time = clock.time() - var.run_start_time
	__end__
	set _prepare ""

define inline_script trial_onset_request
	set description "Send new trial onset information to the server"
	___run__
	msg = {'request_type': 'trial_onset', 
	       'trial_idx': var.trial_idx,
	       'ground_truth': var.ground_truth,
	       'stimuli': var.stimuli}
	
	exp.client.send(msg) # Send trial onset information
	
	while True: # Stay here until receiving 'ok' signal from the server
	    msg = exp.client.listen()
	    if msg == 'ok':
	        break
	        
	__end__
	set _prepare ""

define inline_script trial_onset_time
	set description "Trial onset time"
	___run__
	var.trial_onset_time = clock.time() - var.run_start_time
	__end__
	set _prepare ""

define sequence trial_seq
	set flush_keyboard yes
	set description "Trial sequence"
	run trial_onset_time always
	run trial_onset_request always
	run induction_period always
	run wait_for_decoding always
	run feedback_request_time always
	run static_feedback_request always
	run feedback_reception_time always
	run show_feedback always
	run feedback_delay always
	run trial_offset_time always
	run logging always
	run increase_trial_idx always
	run ITI_interval always

define loop trials_config
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Neurofeedback trials configuration. Set the ground truth representation label you are trying to induce (your model target). Also, define stimuli to be associated with ground truth representation (if you are planning to perform a neurofeedback association study)."
	set cycles 20
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 condition living
	setcycle 0 ground_truth 1
	setcycle 0 stimuli "す"
	setcycle 1 condition living
	setcycle 1 ground_truth 1
	setcycle 1 stimuli "す"
	setcycle 2 condition living
	setcycle 2 ground_truth 1
	setcycle 2 stimuli "す"
	setcycle 3 condition living
	setcycle 3 ground_truth 1
	setcycle 3 stimuli "す"
	setcycle 4 condition living
	setcycle 4 ground_truth 1
	setcycle 4 stimuli "す"
	setcycle 5 condition living
	setcycle 5 ground_truth 1
	setcycle 5 stimuli "す"
	setcycle 6 condition living
	setcycle 6 ground_truth 1
	setcycle 6 stimuli "す"
	setcycle 7 condition living
	setcycle 7 ground_truth 1
	setcycle 7 stimuli "す"
	setcycle 8 condition living
	setcycle 8 ground_truth 1
	setcycle 8 stimuli "す"
	setcycle 9 condition living
	setcycle 9 ground_truth 1
	setcycle 9 stimuli "す"
	setcycle 10 condition living
	setcycle 10 ground_truth 1
	setcycle 10 stimuli "す"
	setcycle 11 condition living
	setcycle 11 ground_truth 1
	setcycle 11 stimuli "す"
	setcycle 12 condition living
	setcycle 12 ground_truth 1
	setcycle 12 stimuli "す"
	setcycle 13 condition living
	setcycle 13 ground_truth 1
	setcycle 13 stimuli "す"
	setcycle 14 condition living
	setcycle 14 ground_truth 1
	setcycle 14 stimuli "す"
	setcycle 15 condition living
	setcycle 15 ground_truth 1
	setcycle 15 stimuli "す"
	setcycle 16 condition living
	setcycle 16 ground_truth 1
	setcycle 16 stimuli "す"
	setcycle 17 condition living
	setcycle 17 ground_truth 1
	setcycle 17 stimuli "す"
	setcycle 18 condition living
	setcycle 18 ground_truth 1
	setcycle 18 stimuli "す"
	setcycle 19 condition living
	setcycle 19 ground_truth 1
	setcycle 19 stimuli "す"
	run trial_seq

define sketchpad wait_for_decoding
	set duration 1
	set description "Ask the server for decoding. Wait here until feedback is received. Normally this period lengths for 6 seconds more for an HRF peak from 5 to 11 seconds after trial onset. Take into account time required for preprocessing each volume"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define sketchpad wait_until_baseline
	set duration 1
	set description "Wait here until baseline adquisition is completed (defined by n_baseline_vols in 1.realtime_fMRI_scripts/modules/config/exp_config.py)"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="" x=0 y=0 z_index=0
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define sketchpad wait_until_heatup
	set duration 1
	set description "Wait here until MRI scanner has completed heatup (defined by n_heatup_vols in 1.realtime_fMRI_scripts/modules/config/exp_config.py)"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="waiting for MRI scanner heatup..." x=0 y=0 z_index=0

